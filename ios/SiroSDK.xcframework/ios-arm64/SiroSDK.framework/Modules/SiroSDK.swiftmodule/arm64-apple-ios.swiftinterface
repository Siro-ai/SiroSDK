// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SiroSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import Combine
import CoreGraphics
import CoreLocation
import FirebaseAuth
import FirebaseCore
import FirebaseDynamicLinks
import FirebaseFirestore
import FirebaseFirestoreSwift
import FirebaseStorage
import Foundation
import Network
import QuartzCore
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
@_Concurrency.MainActor(unsafe) public struct SiroSDKUI : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func uiView() -> UIKit.UIView
  public typealias Body = @_opaqueReturnTypeOf("$s7SiroSDK0A5SDKUIV4bodyQrvp", 0) __
}
@available(iOS 15.0, *)
extension SwiftUI.View {
  public func siroSDKUI() -> some SwiftUI.View
  
}
@_Concurrency.MainActor(unsafe) public struct SiroSDKButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(buttonRadius: CoreFoundation.CGFloat = 30)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func uiView() -> UIKit.UIView
  public typealias Body = @_opaqueReturnTypeOf("$s7SiroSDK0A9SDKButtonV4bodyQrvp", 0) __
}
public enum SKEnvironment {
  case staging
  case production
  public static func == (a: SKEnvironment, b: SKEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
public enum SiroSDKUIKitManager {
  public static func embed()
}
public struct SiroSDK {
  public static var recordingStatus: SKRecorderState {
    get
  }
  public static var initialized: Swift.Bool {
    get
  }
  public static var visibile: Swift.Bool {
    get
  }
  public static func setup(environment: SKEnvironment = .production)
  public static func startRecording()
  public static func stopRecording()
  public static func sendEvent(_ eventName: Swift.String)
  public static func handleAppWillTerminate()
  public static func show()
  public static func hide()
}
public enum SKRecorderState : Swift.String {
  case paused
  case stopped
  case recording
  case notStarted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.Color {
  public static let siroYellow: SwiftUI.Color
  public static let siroBlack: SwiftUI.Color
}
extension SKEnvironment : Swift.Equatable {}
extension SKEnvironment : Swift.Hashable {}
extension SKRecorderState : Swift.Equatable {}
extension SKRecorderState : Swift.Hashable {}
extension SKRecorderState : Swift.RawRepresentable {}
