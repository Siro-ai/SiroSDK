// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SiroSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import Combine
import CoreGraphics
import CoreLocation
import FirebaseAuth
import FirebaseCore
import FirebaseDynamicLinks
import FirebaseFirestore
import FirebaseFirestoreSwift
import FirebaseStorage
import Foundation
import Mixpanel
import Network
import QuartzCore
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
@_Concurrency.MainActor(unsafe) public struct SiroSDKUI : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func uiView() -> UIKit.UIView
  public typealias Body = @_opaqueReturnTypeOf("$s7SiroSDK0A5SDKUIV4bodyQrvp", 0) __
}
@available(iOS 15.0, *)
extension SwiftUI.View {
  public func siroSDKUI() -> some SwiftUI.View
  
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension SiroSDK.AnyCodable : SiroSDK._AnyEncodable, SiroSDK._AnyDecodable {
}
extension SiroSDK.AnyCodable : Swift.Equatable {
  public static func == (lhs: SiroSDK.AnyCodable, rhs: SiroSDK.AnyCodable) -> Swift.Bool
}
extension SiroSDK.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SiroSDK.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension SiroSDK.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension SiroSDK.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct SiroSDKButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(buttonRadius: CoreFoundation.CGFloat = 30)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func uiView() -> UIKit.UIView
  public typealias Body = @_opaqueReturnTypeOf("$s7SiroSDK0A9SDKButtonV4bodyQrvp", 0) __
}
public enum SKEnvironment : Swift.String {
  case staging
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension SiroSDK.AnyEncodable : SiroSDK._AnyEncodable {
}
extension SiroSDK._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension SiroSDK.AnyEncodable : Swift.Equatable {
  public static func == (lhs: SiroSDK.AnyEncodable, rhs: SiroSDK.AnyEncodable) -> Swift.Bool
}
extension SiroSDK.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SiroSDK.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension SiroSDK.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension SiroSDK._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension SiroSDK.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, *)
public enum SiroSDKUIKitManager {
  public static func embed()
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension SiroSDK.AnyDecodable : SiroSDK._AnyDecodable {
}
extension SiroSDK._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension SiroSDK.AnyDecodable : Swift.Equatable {
  public static func == (lhs: SiroSDK.AnyDecodable, rhs: SiroSDK.AnyDecodable) -> Swift.Bool
}
extension SiroSDK.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SiroSDK.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SiroSDK.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SiroSDK {
  public static var recordingStatus: SiroSDK.SKRecorderState {
    get
  }
  public static var initialized: Swift.Bool {
    get
  }
  public static var visibile: Swift.Bool {
    get
  }
  public static func isUserLoggedIn() -> Swift.Bool
  public static func setup(environment: SiroSDK.SKEnvironment = .production)
  public static func requestRecordingPermissions()
  public static func sendEvent(_ eventName: Swift.String, interactionData: SiroSDK.InteractionData?)
  public static func handleAppWillTerminate()
  public static func show()
  public static func hide(withDelay: Swift.Bool = true)
  public static func logout()
}
public struct Contact {
  public init(firstName: Swift.String?, lastName: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Stage {
  public init(id: Swift.String, name: Swift.String?, color: Swift.String?, icon: Swift.String?, won: Swift.Bool?, interacted: Swift.Bool?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Coordinates {
  public init(lat: Swift.Double, long: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Address {
  public init(street: Swift.String, city: Swift.String, state: Swift.String, zip: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InteractionData {
  public init(from decoder: any Swift.Decoder) throws
  public init(id: Swift.String, userId: Swift.String?, leadId: Swift.String?, stage: SiroSDK.Stage?, coordinates: SiroSDK.Coordinates?, address: SiroSDK.Address?, note: Swift.String?, metadata: [Swift.String : SiroSDK.AnyCodable]?, contacts: [SiroSDK.Contact]?, leadDateCreated: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum SKRecorderState : Swift.String {
  case paused
  case stopped
  case recording
  case notStarted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUI.Color {
  public static let siroYellow: SwiftUI.Color
  public static let siroBlack: SwiftUI.Color
}
extension SiroSDK.SKEnvironment : Swift.Equatable {}
extension SiroSDK.SKEnvironment : Swift.Hashable {}
extension SiroSDK.SKEnvironment : Swift.RawRepresentable {}
extension SiroSDK.Contact : Swift.Encodable {}
extension SiroSDK.Contact : Swift.Decodable {}
extension SiroSDK.Stage : Swift.Encodable {}
extension SiroSDK.Stage : Swift.Decodable {}
extension SiroSDK.Coordinates : Swift.Encodable {}
extension SiroSDK.Coordinates : Swift.Decodable {}
extension SiroSDK.Address : Swift.Encodable {}
extension SiroSDK.Address : Swift.Decodable {}
extension SiroSDK.InteractionData : Swift.Encodable {}
extension SiroSDK.InteractionData : Swift.Decodable {}
extension SiroSDK.SKRecorderState : Swift.Equatable {}
extension SiroSDK.SKRecorderState : Swift.Hashable {}
extension SiroSDK.SKRecorderState : Swift.RawRepresentable {}
